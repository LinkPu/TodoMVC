{"remainingRequest":"/home/jarvis/coding/gitlab/training15-todo-mvc/todo-mvc/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/jarvis/coding/gitlab/training15-todo-mvc/todo-mvc/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/jarvis/coding/gitlab/training15-todo-mvc/todo-mvc/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jarvis/coding/gitlab/training15-todo-mvc/todo-mvc/frontend/src/App.vue?vue&type=template&id=7ba5bd90&scoped=true&","dependencies":[{"path":"/home/jarvis/coding/gitlab/training15-todo-mvc/todo-mvc/frontend/src/App.vue","mtime":1576485369823},{"path":"/home/jarvis/coding/gitlab/training15-todo-mvc/todo-mvc/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1575507633447},{"path":"/home/jarvis/coding/gitlab/training15-todo-mvc/todo-mvc/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1575507636816},{"path":"/home/jarvis/coding/gitlab/training15-todo-mvc/todo-mvc/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1575507633447},{"path":"/home/jarvis/coding/gitlab/training15-todo-mvc/todo-mvc/frontend/node_modules/vue-loader/lib/index.js","mtime":1575507636816}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}